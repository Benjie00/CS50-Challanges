sort1 uses: Bubble sort

How do you know?: as it takes the most steps to organise the data in the random50000 file. Illustarted by its long processing time.

sort2 uses: merge sort

How do you know?: because it takes the least time to process the data in the random and reversed 50k files. It is known that merge sorting is faster than bubble and selection sort due to the Big O notation being O(nLogn), whereas it is On^2 in the others.

sort3 uses: selection sort

How do you know?: as selection sort takes less steps to organise data comparing bubble sort, and more than merge sort. This is demonstated by sort3 having a faster time to sort the data than sort 1, but longer than sort 2 (merge sort).

#include <cs50.h>
#include <stdio.h>
#include <string.h>


// Max number of candidates
#define MAX 9

// Candidates have name and vote count
typedef struct
{
    string name;
    int votes;
}
candidate;

// Array of candidates
candidate candidates[MAX];

// Number of candidates
int candidate_count;

// Function prototypes
bool vote(string name);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: plurality [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }

    //adding data to array
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
    }


    int voter_count = get_int("Number of voters: ");

    // Loop over all voters
    for (int i = 0; i < voter_count; i++)
    {
        string name = get_string("Vote: ");
        //me inputing function

        // Check for invalid vote
        if (!vote(name))
        {
            printf("Invalid vote.\n");
        }
    }

    //returns to winner function

    // Display winner of election
    print_winner();
}

// Update vote totals given a new vote
bool vote(string name)
{
    // TODO

    //loop runs as many times as votes are counted.
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(name, candidates[i].name) == 0)
        {
            //increatmenting candiate 'i' vote total
            candidates[i].votes ++;
            return true;

        }
    }
    return false;
}
// Print the winner (or winners) of the election
void print_winner(void)
{


    int max_votes = 0;
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes > max_votes)
        {
            max_votes = candidates[i].votes;
        }
    }


    for (int j = 0; j < candidate_count; j++)
    {
        if (candidates[j].votes == max_votes)
        {
            printf("%s\n", candidates[j].name);
        }
    }

    return;
}